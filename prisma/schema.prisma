// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = ""
}

// model User {
//   id Int @id @default(autoincrement())
//   email String @unique
//   username String @unique
//   password String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?   
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts          Post[]
  comments       Comment[]
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// schema for post

model Post {
  id String @id @default(cuid())
  title String
  content String
  author     User? @relation(fields: [authorEmail],references: [email])
  authorEmail  String?
  createdAt DateTime @default(now())
  comments Comment[]

}

model Comment {
  id String @id @default(cuid())
  text String
  createdAt DateTime @default(now())
  author User?  @relation(fields: [authorEmail],references: [email])
  authorEmail String?
  Post Post? @relation(fields: [postId],references: [id])
  postId String?
}